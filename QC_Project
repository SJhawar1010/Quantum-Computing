{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNKSnfbNvzpEfxpMsT9/GE0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SJhawar1010/Quantum-Computing/blob/main/QC_Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "FXjXGteA6DAM"
      },
      "outputs": [],
      "source": [
        "!pip install dwave-ocean-sdk networkx --quiet"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from dwave.system import DWaveSampler, EmbeddingComposite\n",
        "import networkx as nx"
      ],
      "metadata": {
        "id": "brzcTqQZ6D6o"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def max_cut_qpu(graph):\n",
        "    qubo = {}\n",
        "    for i in graph.nodes:\n",
        "        for j in graph.nodes:\n",
        "            if i == j:\n",
        "                qubo[(i, j)] = 0\n",
        "            elif graph.has_edge(i, j):\n",
        "                qubo[(i, j)] = -1\n",
        "            else:\n",
        "                qubo[(i, j)] = 0\n",
        "\n",
        "    sampler = EmbeddingComposite(DWaveSampler())\n",
        "    print(\"Submitting problem to D-Wave system...\")\n",
        "    sampleset = sampler.sample_qubo(qubo, num_reads=100)\n",
        "    best_sample = sampleset.first.sample\n",
        "    energy = sampleset.first.energy\n",
        "    cut = [node for node in best_sample if best_sample[node] == 1]\n",
        "    return cut, energy"
      ],
      "metadata": {
        "id": "6GQesLTN6X4l"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def main():\n",
        "    graph = nx.Graph()\n",
        "    graph.add_edges_from([\n",
        "        (0, 1), (0, 2), (1, 2), (1, 3), (2, 4), (3, 4)\n",
        "    ])\n",
        "    print(\"Input Graph:\")\n",
        "    print(\"Nodes:\", graph.nodes)\n",
        "    print(\"Edges:\", graph.edges)\n",
        "    cut, energy = max_cut_qpu(graph)\n",
        "    print(\"\\n--- Quantum Annealing Results ---\")\n",
        "    print(f\"Cut: {cut}\")\n",
        "    print(f\"Energy: {energy}\")"
      ],
      "metadata": {
        "id": "mK9kozQb6hT-"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    !dwave config create\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K1CdYG3M6mJ8",
        "outputId": "1a004a54-1b5e-45ed-9aac-141bf8b33864"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using the simplified configuration flow.\n",
            "Try 'dwave config create --full' for more options.\n",
            "\n",
            "Updating existing configuration file: /root/.config/dwave/dwave.conf\n",
            "Available profiles: defaults\n",
            "Updating existing profile: defaults\n",
            "Solver API token [DEV-ba2620bc6b7c803e65aaf1c53f9ec58dde8ae289]: DEV-ba2620bc6b7c803e65aaf1c53f9ec58dde8ae289\n",
            "Configuration saved.\n",
            "Input Graph:\n",
            "Nodes: [0, 1, 2, 3, 4]\n",
            "Edges: [(0, 1), (0, 2), (1, 2), (1, 3), (2, 4), (3, 4)]\n",
            "Submitting problem to D-Wave system...\n",
            "\n",
            "--- Quantum Annealing Results ---\n",
            "Cut: [0, 1, 2, 3, 4]\n",
            "Energy: -12.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "w8-p886v6onF"
      },
      "execution_count": 10,
      "outputs": []
    }
  ]
}